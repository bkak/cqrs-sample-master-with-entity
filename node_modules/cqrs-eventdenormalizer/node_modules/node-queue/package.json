{
  "author": {
    "name": "adrai"
  },
  "name": "node-queue",
  "version": "0.4.0",
  "private": false,
  "main": "index.js",
  "engines": {
    "node": ">=0.4.12"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "lodash": ">= 2.2.1",
    "tolerance": ">= 1.0.0"
  },
  "devDependencies": {
    "async": ">= 0.1.18",
    "mocha": ">= 1.0.1",
    "expect.js": ">= 0.1.2"
  },
  "description": "Node-queue is a node.js module for multiple databases. It can be very useful if you work with (d)ddd, cqrs, eventsourcing, commands and events, etc.",
  "keywords": [
    "orm",
    "mongodb",
    "couchdb",
    "memory",
    "database",
    "cqrs",
    "eventsourcing",
    "ddd",
    "dddd",
    "command",
    "event",
    "eventdenormalizer",
    "domain"
  ],
  "homepage": "https://github.com/adrai/node-queue",
  "repository": {
    "type": "git",
    "url": "git@github.com:adrai/node-queue.git"
  },
  "bugs": {
    "url": "https://github.com/adrai/node-queue/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/adrai/node-queue/master/licence"
    }
  ],
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Introduction\n\n[![Build Status](https://secure.travis-ci.org/adrai/node-queue.png)](http://travis-ci.org/adrai/node-queue)\n\nNode-queue is a node.js module for multiple databases.\nIt can be very useful if you work with (d)ddd, cqrs, eventsourcing, commands and events, etc.\n\n# Installation\n\n    $ npm install node-queue\n\n# Usage\n\n## Connecting to an in-memory queue\n\n\tvar queue = require('node-queue');\n\n\tqueue.connect(function(err, myQueue) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        // you can now use myQueue variable to go on...\n    });\n\n## Connecting to any queue (mongodb in the example)\nMake shure you have installed the required driver, in this example run: 'npm install mongodb'.\n\n    var queue = require('node-queue');\n\n    queue.connect(\n        {\n            type: 'mongoDb',\n            host: 'localhost',      // optional\n            port: 27017,            // optional\n            dbName: 'queuedb',      // optional\n            collectionName: 'queue' // optional\n            timeout: 10000          // optional\n        }, \n        function(err, myQueue) {\n            if(err) {\n                console.log('ohhh :-(');\n                return;\n            }\n\n            // you can now use myQueue variable to go on...\n        }\n    );\n\n## Pushing...\n\n    myQueue.push('myId', { some: 'data' }, function(err) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n    });\n\n## Removing...\n\n    myQueue.remove('myId',  function(err) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n    });\n\n## Check if is already queued\n\n    myQueue.isQueued('myId',  function(err) {\n        if(err) {\n            console.log('Already queued!');\n        } else {\n            console.log('Not queued!');\n        }\n    });\n\n## Getting all...\n\n    myQueue.getAll(function(err, items) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        // items is an array of all what is in the queue\n        var firstItem = items[0];\n        console.log('the id: ' + firstItem.id);\n        console.log('the pushed data: ' + firstItem.data);\n    });\n\n## Obtain a new id\n\n    myQueue.getNewId(function(err, newId) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        console.log('the new id is: ' + newId);\n    });\n\n## Decrement (can be very useful if you want to create a eventQueue for eventdenormalizers, cqrs, eventsourcing)\n\n    // if you push yout items with a workers property...\n    myQueue.push('myId', { some: 'data', workers: 2 }, function(err) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n    });\n\n    ...\n\n    // then you can decrement the workers property\n    myQueue.decrement('myId', function(err, hasBeenRemoved) {\n        if(err) {\n            console.log('ohhh :-(');\n            return;\n        }\n\n        // Now the workers value is decremented,\n        // but if the workers value after the decrement is 0,\n        // the record will be automatically removed.\n        // You can check this with the flag hasBeenRemoved!\n\n        if(hasBeenRemoved) {\n            console.log('All workers finished!');\n        }\n\n    });\n\n\n# Database Support\nCurrently these databases are supported:\n\n1. inMemory\n2. mongoDb ([node-mongodb-native] (https://github.com/mongodb/node-mongodb-native))\n3. couchDb ([cradle] (https://github.com/cloudhead/cradle))\n4. tingoDb ([tingodb] (https://github.com/sergeyksv/tingodb))\n\n# License\n\nCopyright (c) 2013 Adriano Raiano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "node-queue@0.4.0",
  "dist": {
    "shasum": "b433fde6ef5ef75fbcfdca290171117598b94d36"
  },
  "_from": "node-queue@>= 0.4.0",
  "_resolved": "https://registry.npmjs.org/node-queue/-/node-queue-0.4.0.tgz"
}
