{
  "author": {
    "name": "Jan Muehlemann, Adriano Raiano"
  },
  "name": "eventstore",
  "version": "0.6.2",
  "contributors": [
    {
      "name": "Jan Muehlemann",
      "email": "jan.muehlemann@gmail.com"
    },
    {
      "name": "Adriano Raiano",
      "email": "adriano@raiano.ch"
    }
  ],
  "private": false,
  "repository": {
    "type": "git",
    "url": "git@github.com:jamuhl/nodeEventStore.git"
  },
  "keywords": [
    "cqrs",
    "eventstore",
    "ddd",
    "eventsourcing"
  ],
  "main": "./index.js",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">= v0.6.15"
  },
  "dependencies": {
    "async": ">= 0.0.1"
  },
  "devDependencies": {
    "mocha": ">= 0.0.1",
    "expect.js": ">= 0.0.1"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Introduction\n\n[![Build Status](https://secure.travis-ci.org/KABA-CCEAC/nodeEventStore.png)](http://travis-ci.org/KABA-CCEAC/nodeEventStore)\n\nThe project goal is to provide an eventstore implementation for node.js:\n\n- load and store events via EventStream object\n- event dispatching to your publisher\n- supported Dbs (MongoDb, Redis)\n- snapshot support\n\n# Installation\n\n\tnpm install eventstore\n\nchoose one of the existing storage implementation or provide your own:\n\n\t// for mongoDb\n\tnpm install eventstore.mongoDb\n\n\t// for redis\n\tnpm install eventstore.redis\n\n# Usage\n\n### Require the module and init the eventstore:\n\n\tvar eventstore = require('eventstore');\n\n\tvar es = eventstore.createStore(); // optional pass in your options\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // to disable forking of event dispatching set forkDispatching to false\n\nBy default the eventstore will use an inMemory Storage, a fakePublisher and no logger.\n\nTo use the provided console.logger you could create the eventstore \nwith option `eventstore.createStore({logger: 'console'});`.\n\n### Provide implementation for storage and publishing events\n\nExample will use redis storage, but same will work for mongoDb.\n\n\tvar storage = require('eventstore.redis');\n\n\tstorage.createStorage(function(err, store) {\n\t    es.configure(function() {\n\t        es.use(store);\n\t        es.use(publisher); // your publisher must provide function 'publisher.publish(event)'\n\t        // es.use(logger);\n\t    });\n\n\t    // start eventstore\n\t    es.start();\n\t});\n\n### Work with the eventstore\n\nget the eventhistory of an aggregate\n\n    es.getEventStream(aggregateId, 0, function(err, stream) {                    \n        var history = stream.events; // the original event will be in events[i].payload\n\n        // myAggregate.loadFromHistory(history);\n    });\n\nstore a new event and commit it to store\n\n\tes.getEventStream(aggregateId, 0, function(err, stream) {                    \n        \n    \tstream.addEvent(new event);\n        stream.commit();\n\n    });\n\nthe committed event will be dispatched to the provided publisher\n\n### Work with snapshotting\n\nget snapshot and eventhistory from the snapshot point\n\n\tes.getFromSnapshot(aggregateId, function(err, snapshot, stream) {\n\t\t\n\t\tvar snap = snapshot.data;\n\t\tvar history = stream.events; // events history from given snapshot\n\n\t\tmyAggregate.loadSnapshot(snap);\n\t\tmyAggregate.loadFromHistory(history);\n\n\t});\n\ncreate a snapshot point\n\n\tes.getFromSnapshot(aggregateId, function(err, snapshot, stream) {\n\t\t\n\t\tvar snap = snapshot.data;\n\t\tvar history = stream.events; // events history from given snapshot\n\n\t\tmyAggregate.loadSnapshot(snap);\n\t\tmyAggregate.loadFromHistory(history);\n\n\t\t// create a new snapshot depending on your rules\n\t\tif (history.length > myRange) {\n\t\t\tes.createSnapshot(aggregateId, stream.currentRevision(), myAggregate.getSnap());\n\t\t}\n\n\t\t// go on: store new event and commit it\n\n\t});\n\n### Replaying events\n\nIf you want to replay all events from the store you can do it with the function getEventRange:\n\n\tvar match = {} // match query in inner event (payload), for example: { id: eventId }\n                   // if {} all events will return\n      , amount = 20; // amount of events to receive per request\n\n\tvar handle = function(err, events) {\n\t  // events is the eventstream\n\t  if (events.length === amount) {\n\t    events.next(handle);\n\t  } else {\n\t    // finished to replay\n\t  }\n\t};\n\n\tes.getEventRange(match, amount, handle);\n\n\nIf you want to replay all events of a particular aggregate or stream you can do it with the function getEvents:\n\n\tvar streamId = '1234'\n\t  , revMin = null  // optional, must be a number\n\t  , revMax = null; // optional, must be a number\n\n\tes.getEvents(streamId, revMin, revMax, function(err, events) {\n\t  // events is the eventstream\n\t});\n\n\n# Sample Integration\n\n- [nodeCQRS](https://github.com/jamuhl/nodeCQRS) A CQRS sample integrating eventstore\n\n# Inspiration\n\n- Jonathan Oliver's [EventStore](https://github.com/joliver/EventStore) for .net.\n\n# License\n\nCopyright (c) 2012 Jan Muehlemann, Adriano Raiano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n",
  "readmeFilename": "README.markdown",
  "description": "[![Build Status](https://secure.travis-ci.org/KABA-CCEAC/nodeEventStore.png)](http://travis-ci.org/KABA-CCEAC/nodeEventStore)",
  "bugs": {
    "url": "https://github.com/jamuhl/nodeEventStore/issues"
  },
  "_id": "eventstore@0.6.2",
  "dist": {
    "shasum": "d1b9e72bddc251ef4340d1c7b99e545b52c05f0d"
  },
  "_from": "eventstore@>= 0.6.2",
  "_resolved": "https://registry.npmjs.org/eventstore/-/eventstore-0.6.2.tgz"
}
