{
  "author": {
    "name": "adrai"
  },
  "name": "nodeEventedCommand",
  "version": "0.1.2",
  "private": false,
  "repository": {
    "type": "git",
    "url": "git@github.com:adrai/nodeEventedCommand.git"
  },
  "keywords": [
    "cqrs",
    "evented",
    "ddd",
    "eventsourcing",
    "command",
    "observer",
    "event"
  ],
  "main": "./index.js",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">= v0.6.5"
  },
  "dependencies": {
    "eventemitter2": ">= v0.4.8"
  },
  "devDependencies": {},
  "scripts": {},
  "readme": "# Introduction\n\nThis project is inspirated by [jamuhl](https://github.com/jamuhl/backbone.CQRS).\n\nProject goal is to provide a simple command/event handling for evented systems like cqrs.\n\n# Installation\n\n    $ npm install nodeEventedCommand\n\n# Simple usage\n\n\t// get the hub\n\tvar hub = require('nodeEventedCommand').hub;\n\t\n\t// initialize the hub by passing the function that gets the command id from the event\n\thub.init(\n\t\tfunction(evt) {\n\t\t\treturn evt.commandId;\n\t\t}\n\t);\n\n\t// and the command\n\tvar Command = require('nodeEventedCommand').Command;\n\n# Advanced usage with own instance\n\n\t// get the hub\n\tvar hub = require('nodeEventedCommand').hub.create();\n\t\n\t// initialize the hub by passing the function that gets the command id from the event\n\thub.init(\n\t\tfunction(evt) {\n\t\t\tvar idEndIndex = evt.id.indexOf('_event');\n\t\t\tvar id = evt.id.substring(0, idEndIndex);\n\t\t\treturn id;\n\t\t}\n\t);\n\n\t// and the command\n\tvar Command = require('nodeEventedCommand').Command.create(hub);\n\n## Wire up commands and events\n\n\t// pass in events from your bus\n\tbus.on('events', function(data){\n\t    hub.emit('events', data);\n\n\t    // use it with wildcards for mulit callback\n\t    // hub.emit('event:' + data.event, data);\n\t});\n\n\t// pass commands to bus\n\thub.on('commands', function(data) {\n\t    bus.emit('commands', data);\n\t});\n\n## Send commands\n\n\tvar cmd = new Command({\n\t    command: 'changePerson',\n\t    payload: {\n\t        id: 8,\n\t        name: 'my name'\n\t    }\n\t});\n\n\t// emit it\n\tcmd.emit();\n\n\n\n\t// if you want to observe the command pass a callback\n\tcmd.emit(function(evt) {\n\t\t\n\t});\n\n\n\t// if you want to observe the command that generates any events pass an object like this:\n\tcmd.emit({\n\n\t\tevent1: function(evt) {\n\t\t\t\n\t\t},\n\n\t\tevent2: function(evt) {\n\t\t\t\n\t\t}\n\t\t\n\t});\n\n# License\n\nCopyright (c) 2012 Adriano Raiano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.markdown",
  "description": "This project is inspirated by [jamuhl](https://github.com/jamuhl/backbone.CQRS).",
  "bugs": {
    "url": "https://github.com/adrai/nodeEventedCommand/issues"
  },
  "_id": "nodeEventedCommand@0.1.2",
  "dist": {
    "shasum": "8822646770a1574eebaf4421bc45546d04dc9765"
  },
  "_from": "nodeEventedCommand@>= 0.1.2",
  "_resolved": "https://registry.npmjs.org/nodeEventedCommand/-/nodeEventedCommand-0.1.2.tgz"
}
